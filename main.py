from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
import ssym 
from urllib.parse import urlparse
import os
import tempfile
import shutil

def is_supported(url: str) -> bool:
    domain = urlparse(url).netloc
    return domain in ['music.yandex.ru', 'soundcloud.com', 'open.spotify.com']

def platform(url: str) -> bool:
    domain = urlparse(url).netloc
    return domain

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message_id = update.message.message_id
    
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="<i><b>ü§ó –ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º—É–∑—ã–∫–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º.</b></i>\n\n<b>–°–µ–π—á–∞—Å —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–∏—Å–ª–∞—Ç—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫/–ø–ª–µ–π–ª–∏—Å—Ç/–∞–ª—å–±–æ–º!</b>\n\n<code>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: YandexMusic/SoundCloud/Spotify</code>\n\n<b>/menu - –ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é</b>",
        reply_to_message_id=message_id,
        parse_mode="HTML"
    )

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–¢–µ–ª–µ–≥—Ä–∞–º –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞", url="https://t.me/dreviax")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "<b>üò≤ –ü—Ä–∏–ª—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –±–æ—Ç—É –∏ –æ–Ω —Å–∞–º –Ω–∞–π–¥–µ—Ç –∏ —Å–∫–∞—á–∞–µ—Ç —Ç—Ä–µ–∫, –ø–ª–µ–π–ª–∏—Å—Ç –∏–ª–∏ –∞–ª—å–±–æ–º</b>\n\n<b><i>–í–Ω–∏–º–∞–Ω–∏–µ –≤—Å–µ —Ç—Ä–µ–∫–∏ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤/–∞–ª—å–±–æ–º–æ–≤ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏! –ù–µ –ø—É–≥–∞–π—Ç–µ—Å—å</i></b>\n\n\n<code>üôè –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö:</code>",
        reply_markup=reply_markup,
        parse_mode="HTML"
    )

async def process_music_link(update: Update, url: str, is_supported: bool, url_platform: str):
    if not is_supported:
        await update.message.reply_text("<b>‚ùå –≠—Ç–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è!</b>", parse_mode="HTML")
        return
        
    await update.message.reply_text(f'<b>ü§ñ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É <a href="{url}">–∫–æ–Ω—Ç–µ–Ω—Ç–∞</a></b>', parse_mode="HTML")
    
    files = []
    try:
        if url_platform == "soundcloud.com":
            files = ssym.download_soundcloud_url(url)
        elif url_platform == "music.yandex.ru":
            files = ssym.download_yandex_music_url(url)
        elif url_platform == "open.spotify.com":
            files = ssym.download_spotify_url(url)
        
        if not files:
            raise Exception("<b>üíÄ –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>")
            
        success_count = 0
        for file_path in files:
            try:
                with open(file_path, 'rb') as file:
                    await update.message.reply_document(
                        document=file,
                        filename=os.path.basename(file_path),
                        caption=f"<b>üéµ {os.path.basename(file_path)[:-4]}</b>" if len(files) > 1 else None,
                        parse_mode="HTML"
                    )
                success_count += 1
            except Exception as e:
                print(f"<b>üíÄ –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}</b>")
                continue
        
        if success_count == 0:
            raise Exception("<b>üíÄ –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞</b>")
            
    except Exception as e:
        error_msg = (
            f"<b>ü§ï –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:</b>\n"
            f"<code><pre>{str(e)}</pre></code>\n\n"
            "<b>üëΩ –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</b>\n"
            "1) –ü–ª–µ–π–ª–∏—Å—Ç/–∞–ª—å–±–æ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∏–ª–∏ —É–¥–∞–ª—ë–Ω\n"
            "2) –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∞–≤—Ç–æ—Ä—Å–∫–∏—Ö –ø—Ä–∞–≤\n"
            "3) –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ\n\n"
            "<b><i>–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–∫–∞—á–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–∫–∏ –≤—Ä—É—á–Ω—É—é</i></b>"
        )
        await update.message.reply_text(error_msg, parse_mode="HTML")
    finally:
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        if files:
            temp_dirs = set()
            for file_path in files:
                if os.path.exists(file_path):
                    try:
                        os.remove(file_path)
                        temp_dir = os.path.dirname(file_path)
                        if temp_dir.startswith(tempfile.gettempdir()):
                            temp_dirs.add(temp_dir)
                    except Exception as e:
                        print(f"<b>üíÄ –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}</b>")
            
            for temp_dir in temp_dirs:
                try:
                    shutil.rmtree(temp_dir, ignore_errors=True)
                except Exception as e:
                    print(f"<b>üíÄ –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {temp_dir}: {e}</b>")

    if files:
        await update.message.reply_text(
            "<b>‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n"
            "<b><i>üëΩ –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞. –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º: @dreviax</i></b>",
            parse_mode="HTML"
        )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text
    
    if user_text.startswith(('http://', 'https://')):
        result = is_supported(user_text)
        url_platform = platform(user_text)
        await process_music_link(update, user_text, result, url_platform)
    else:
        await update.message.reply_text("<b>üò° –ö–∞–∂–µ—Ç—Å—è... –≠—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞!</b>\nü§ó –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç)", parse_mode="HTML")

app = Application.builder().token("7507590797:AAEbrW1rS5IrPOqFetLiTSGKUNeQSRERMQ0").build()
app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
app.add_handler(CommandHandler("menu", menu))
app.run_polling()